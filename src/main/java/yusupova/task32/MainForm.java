package yusupova.task32;


import java.awt.event.ActionListener;
import java.io.RandomAccessFile;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author a.yusupova
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        jtResult.getTableHeader().setUI(null);
        jtOpA.getTableHeader().setUI(null);
        jtOpB.getTableHeader().setUI(null);
        
        Integer r = cols;
        jtfColoumns.setText(r.toString());
        r = rows;
        jtfRows.setText(r.toString());
        
        copyResizeArrays(rows, cols);
        UpdateMatricesSize();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jDialog1 = new javax.swing.JDialog();
        jFileChooser1 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jtfRows = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jtfColoumns = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtResult = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtOpB = new javax.swing.JTable();
        jlOperation = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtOpA = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jrbSum = new javax.swing.JRadioButton();
        jrbMult = new javax.swing.JRadioButton();
        jrbSubstr = new javax.swing.JRadioButton();
        jbGenerateRandomOpA = new javax.swing.JButton();
        jbGenerateRandomOpB = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jbZeroOpA = new javax.swing.JButton();
        jbUnityOpA = new javax.swing.JButton();
        jbUnityOpB = new javax.swing.JButton();
        jbZeroOpB = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jbOpASave = new javax.swing.JButton();
        jbOpALoad = new javax.swing.JButton();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Rows:");

        jtfRows.setText("3");
        jtfRows.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfRowsActionPerformed(evt);
            }
        });

        jLabel2.setText("Columns:");

        jtfColoumns.setText("3");
        jtfColoumns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfColoumnsActionPerformed(evt);
            }
        });

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        jtResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtResult.setName(""); // NOI18N
        jScrollPane1.setViewportView(jtResult);

        jLabel3.setText("=");

        jtOpB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtOpB.setName(""); // NOI18N
        jScrollPane2.setViewportView(jtOpB);

        jlOperation.setText("+");

        jtOpA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jtOpA.setName(""); // NOI18N
        jScrollPane3.setViewportView(jtOpA);

        jLabel4.setText("Opetation:");

        buttonGroup1.add(jrbSum);
        jrbSum.setText("sum(+)");
        jrbSum.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrbSumStateChanged(evt);
            }
        });

        buttonGroup1.add(jrbMult);
        jrbMult.setText("multiplication(*)");
        jrbMult.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrbMultStateChanged(evt);
            }
        });
        jrbMult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jrbMultActionPerformed(evt);
            }
        });

        buttonGroup1.add(jrbSubstr);
        jrbSubstr.setText("substraction (-)");
        jrbSubstr.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jrbSubstrStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbSum, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbSubstr, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jrbMult, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbSum)
                .addGap(3, 3, 3)
                .addComponent(jrbSubstr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jrbMult)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jbGenerateRandomOpA.setText("Generate random");
        jbGenerateRandomOpA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGenerateRandomOpAActionPerformed(evt);
            }
        });

        jbGenerateRandomOpB.setText("Generate random");
        jbGenerateRandomOpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGenerateRandomOpBActionPerformed(evt);
            }
        });

        jButton1.setText("Calculate");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jbZeroOpA.setText("0");
        jbZeroOpA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbZeroOpAActionPerformed(evt);
            }
        });

        jbUnityOpA.setText("E");
        jbUnityOpA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUnityOpAActionPerformed(evt);
            }
        });

        jbUnityOpB.setText("E");
        jbUnityOpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUnityOpBActionPerformed(evt);
            }
        });

        jbZeroOpB.setText("0");
        jbZeroOpB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbZeroOpBActionPerformed(evt);
            }
        });

        jbOpASave.setText("Save");
        jbOpASave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOpASaveActionPerformed(evt);
            }
        });

        jbOpALoad.setText("Load");
        jbOpALoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOpALoadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbOpASave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbOpALoad)
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbOpASave)
                    .addComponent(jbOpALoad))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jlOperation))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbGenerateRandomOpA, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbZeroOpA)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbUnityOpA))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jbGenerateRandomOpB, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbZeroOpB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbUnityOpB))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfRows, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jtfColoumns, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtfRows, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jtfColoumns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbGenerateRandomOpA)
                        .addComponent(jbZeroOpA))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jbGenerateRandomOpB)
                        .addComponent(jbUnityOpA))
                    .addComponent(jButton1)
                    .addComponent(jbZeroOpB)
                    .addComponent(jbUnityOpB))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(jlOperation)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jrbMultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jrbMultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jrbMultActionPerformed

    private void jrbSumStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrbSumStateChanged
        // TODO add your handling code here:
        if(jrbSum.isSelected()) jlOperation.setText("+");
    }//GEN-LAST:event_jrbSumStateChanged

    private void jrbSubstrStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrbSubstrStateChanged
        // TODO add your handling code here:
        if(jrbSubstr.isSelected()) jlOperation.setText("-");

    }//GEN-LAST:event_jrbSubstrStateChanged

    private void jrbMultStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jrbMultStateChanged
        // TODO add your handling code here:
        if(jrbMult.isSelected()) jlOperation.setText("*");

    }//GEN-LAST:event_jrbMultStateChanged

    private void jtfRowsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfRowsActionPerformed
        // TODO add your handling code here:
        try{
            rows = Integer.parseInt(jtfRows.getText());
        }
        catch(NumberFormatException e){
            
            rows = 1;
            Integer r = rows;
            jtfRows.setText(r.toString());
        }
        
        if(rows<1){
            rows = 1;
            Integer r = rows;
            jtfRows.setText(r.toString());
        }
        
        copyResizeArrays(rows, cols);
        UpdateMatricesSize();
        
    }//GEN-LAST:event_jtfRowsActionPerformed

    private void jtfColoumnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfColoumnsActionPerformed
        // TODO add your handling code here:
        try{
            cols = Integer.parseInt(jtfColoumns.getText());
        }
        catch(NumberFormatException e){
            
            cols = 1;
            Integer r = cols;
            jtfRows.setText(r.toString());
        }
        
        if(cols<1){
            cols = 1;
            Integer r = cols;
            jtfColoumns.setText(r.toString());
        }
        
        copyResizeArrays(rows, cols);
        
        UpdateMatricesSize();
        
    }//GEN-LAST:event_jtfColoumnsActionPerformed

    private void jbGenerateRandomOpAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGenerateRandomOpAActionPerformed
        // TODO add your handling code here:
        fillRandom(opA);
        arrayToTable(opA, jtOpA);
        
    }//GEN-LAST:event_jbGenerateRandomOpAActionPerformed

    private void jbGenerateRandomOpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGenerateRandomOpBActionPerformed
        // TODO add your handling code here:
        fillRandom(opB);
        arrayToTable(opB, jtOpB );
    }//GEN-LAST:event_jbGenerateRandomOpBActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        performOperation();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jbZeroOpAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbZeroOpAActionPerformed
        // TODO add your handling code here:
        setTo(opA, 0.0);
        arrayToTable(opA, jtOpA);
    }//GEN-LAST:event_jbZeroOpAActionPerformed

    private void jbUnityOpAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUnityOpAActionPerformed
        // TODO add your handling code here:
        setTo(opA, 0.0);
        setDiagonalTo(opA, 1.0);
        arrayToTable(opA, jtOpA);
    }//GEN-LAST:event_jbUnityOpAActionPerformed

    private void jbZeroOpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbZeroOpBActionPerformed
        // TODO add your handling code here:
        setTo(opB, 0.0);
        arrayToTable(opB, jtOpB);
    }//GEN-LAST:event_jbZeroOpBActionPerformed

    private void jbUnityOpBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUnityOpBActionPerformed
        // TODO add your handling code here:
        setTo(opB, 0.0);
        setDiagonalTo(opB, 1.0);
        arrayToTable(opB, jtOpB);
        
    }//GEN-LAST:event_jbUnityOpBActionPerformed

    private void jbOpALoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOpALoadActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setDialogTitle("Save operand A");
        jFileChooser1.setDialogType(javax.swing.JFileChooser.OPEN_DIALOG );
        int approve = jFileChooser1.showOpenDialog(this);
        
        if(approve == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            loadMatricesFromFile(jFileChooser1.getSelectedFile());
        }
        
    }//GEN-LAST:event_jbOpALoadActionPerformed

    private void jbOpASaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOpASaveActionPerformed
        // TODO add your handling code here:
        jFileChooser1.setDialogTitle("Save operand A");
        jFileChooser1.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG );
        int approve = jFileChooser1.showSaveDialog(this);
        
        if(approve == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            tableToArray(jtOpA, opA);
            saveMatriceToFile(jFileChooser1.getSelectedFile());
        }
    }//GEN-LAST:event_jbOpASaveActionPerformed

    
   
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    
    
    private void tableToArray(javax.swing.JTable t, double[][] arr){
        if(arr == null) 
            throw new NullPointerException("arr field should not be null");
        
        int arrRows = arr.length;
        if(arrRows < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        int arrCols = arr[0].length;
        if(arrCols < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        
        int tRows = t.getRowCount();
        int tCols = t.getColumnCount();
        
        if((arrRows!=tRows)||(arrCols!=tCols))
        {
            copyResizeArrays(tRows, tCols);
        }
        
        TableModel tm = t.getModel();

        for(int i=0;i<tRows;++i)
            for(int j=0;j<tCols;++j)
            {
                arr[i][j] = Double.parseDouble(tm.getValueAt(i, j).toString());
            }
        
    }
    
    private void fillRandom(double[][] arr){
        if(arr == null) 
            throw new NullPointerException("arr field should not be null");
        
        int arrRows = arr.length;
        if(arrRows < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        int arrCols = arr[0].length;
        if(arrCols < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        
        for(int i=0;i<arrRows;++i)
            for(int j=0;j<arrCols;++j)
            {
                arr[i][j] = 2.0*(Math.random()-0.5);
            }
        
        
    }
    
    private void setTo(double[][] arr, double value)
    {
        if(arr == null) 
            throw new NullPointerException("arr field should not be null");
        
        int arrRows = arr.length;
        if(arrRows < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        int arrCols = arr[0].length;
        if(arrCols < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        for(int i=0;i<arrRows;++i)
            for(int j=0;j<arrCols;++j)
            {
                arr[i][j] = value;
            }
    }
    
    private void setDiagonalTo(double[][] arr, double value)
    {
        if(arr == null) 
            throw new NullPointerException("arr field should not be null");
        
        int arrRows = arr.length;
        if(arrRows < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        int arrCols = arr[0].length;
        if(arrCols < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        for(int i=0;i<Math.min(arrRows,arrCols);++i)
            arr[i][i] = value;
    }
    
            
    private void arrayToTable(double[][] arr, javax.swing.JTable t){
        if(arr == null) 
            throw new NullPointerException("arr field should not be null");
        
        int arrRows = arr.length;
        if(arrRows < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        int arrCols = arr[0].length;
        if(arrCols < 1) 
            throw new IllegalArgumentException("Array has no fields");
        
        
        int tRows = t.getRowCount();
        int tCols = t.getColumnCount();
        
        if((arrRows!=tRows)||(arrCols!=tCols))
        {
            UpdateMatrixSize(t, arrRows, arrCols);
        }
        
        TableModel tm = t.getModel();
        Double d;
        for(int i=0;i<arrRows;++i)
            for(int j=0;j<arrCols;++j)
            {
                d = arr[i][j];
                tm.setValueAt(d,i,j);
            }
    }
    
    private void UpdateMatrixSize(javax.swing.JTable t, int newRows, int newCols)
    {
        TableModel newModel = new DefaultTableModel(newRows,newCols);
        TableModel model = t.getModel();
        
        for(int i=0;i<Math.min(newModel.getRowCount(),model.getRowCount());++i)
            for(int j=0;j<Math.min(newModel.getColumnCount(),model.getColumnCount());++j)
            {
                model.setValueAt(newModel.getValueAt(i,j), i, j);
            }
        
        t.setModel(newModel);
    }
    
    
    private void UpdateMatricesSize()
    {
        UpdateMatrixSize(jtResult, rows, cols);
        UpdateMatrixSize(jtOpA, rows, rows);
        UpdateMatrixSize(jtOpB, rows, cols);
    }
    
    
    private void copyResizeArrays(int newRows, int newCols){
        result = copyResize(result,  newRows,  newCols);
        opA = copyResize(opA,  newRows,  newRows);
        opB = copyResize(opB,  newRows,  newCols);
    }
    
    void multArrays(double[][] opA, double[][] opB, double[][] result)
    {
        assert((opA != null) && (opB != null) && (result != null));
        assert((opA.length>0)&&(opB.length>0)&&(result.length>0));
        assert((opA[0].length>0)&&(opB[0].length>0)&&(result[0].length>0));
        assert((result.length == opA.length)&&
                (result[0].length == opB.length)&&
                (result[0].length == opB[0].length));
        
        
        for(int i = 0;i<opA.length;++i)
            for(int j = 0;j<opB[0].length;++j)
            {
                result[i][j] = 0;
                for(int k=0;k<opA[0].length;++k)
                {
                    result[i][j] += opA[i][k]*opB[k][j];
                }
            }
    }
    
    void sumArrays(double[][] opA, double[][] opB, double[][] result)
    {
        assert((opA != null) && (opB != null) && (result != null));
        assert((opA.length>0)&&(opB.length>0)&&(result.length>0));
        assert((opA[0].length>0)&&(opB[0].length>0)&&(result[0].length>0));
        assert((result.length == opA.length)&&
                (result[0].length == opB.length)&&
                (result[0].length == opB[0].length));
        
        
        for(int i = 0;i<result.length;++i)
        {
            for(int j = 0;j<result.length;++j)
            {
                result[i][j] = opA[i][j]+opB[i][j];
            }
        }
    }
    
    void substrArrays(double[][] opA, double[][] opB, double[][] result)
    {
        assert((opA != null) && (opB != null) && (result != null));
        assert((opA.length>0)&&(opB.length>0)&&(result.length>0));
        assert((opA[0].length>0)&&(opB[0].length>0)&&(result[0].length>0));
        assert((result.length == opA.length)&&
                (result[0].length == opB.length)&&
                (result[0].length == opB[0].length));
        
        
        for(int i = 0;i<result.length;++i)
            for(int j = 0;j<result.length;++j)
            {
                result[i][j] = opA[i][j]-opB[i][j];
            }
    }
    
    private void performOperation()
    {
        tableToArray(jtOpA, opA);
        tableToArray(jtOpB, opB);
        
        if(jrbMult.isSelected())
        {
            multArrays(opA, opB, result);
        }
        else if(jrbSum.isSelected())
        {
            sumArrays(opA, opB, result);
        }
        else if(jrbSubstr.isSelected())
        {
            substrArrays(opA, opB, result);
        }
        
        arrayToTable(result, jtResult);
    }
    
    private double[][] copyResize(double[][] old, int newRows, int newCols){
        
        double[][] newArray = new double[newRows][newCols];
        
        if(old!= null)
        {
            for(int i=0;i<Math.min(newRows,old.length);++i)
                for(int j=0;j<Math.min(newCols,old[0].length);++j)
                    newArray[i][j] = old[i][j];
        }
        else{
            // fill zeros
            for(int i=0;i<newRows;++i)
                for(int j=0;j<newCols;++j)
                    newArray[i][j] = 0;
        }
        
        return newArray;        
    }
    
    String matrixToText(double[][] mat, String name)
    {
        if(mat == null)
            throw new IllegalArgumentException("Matrix is null");
        int rows = mat.length;
        if(rows<1)
            throw new IllegalArgumentException("Matrix is empty: rows = "+rows);
        int cols = mat[0].length;

        if(cols<1)
            throw new IllegalArgumentException("Matrix is empty: cols = " + cols);
        
        String result ="";
        
        result += name + "[" + rows + ", "+ cols+"]: {\n";
        
        for(int i=0;i<rows;++i)
        {
            for(int j=0;j<cols;++j)
            {
                Double d = mat[i][j];
                result += d.toString() + ((j<(cols-1))?" ":"");
            }
            result += "\n";
        }
        
        result += "}";
        
        
        return result;

    }
    
    
    void saveMatriceToFile(java.io.File file)
    {
        
        tableToArray(jtOpA, opA);
        tableToArray(jtOpB, opB);
        tableToArray(jtResult, result);
        
        try(RandomAccessFile dos = new RandomAccessFile(file,"rw")) {
            String fileContent = "";
            
            fileContent += matrixToText(opA, "opA");
            fileContent += "\n";
            fileContent += matrixToText(opB, "opB");
            fileContent += "\n";
            fileContent += matrixToText(result, "result");
            fileContent += "\n";
            
            byte[] b = fileContent.getBytes();
            dos.write(b);
            //...
        }
        catch(java.io.IOException e){              
            JOptionPane.showMessageDialog(null, "Error writing to file '" +file.getAbsolutePath()+"'\n" + e, "Error: " + "file access", JOptionPane.ERROR_MESSAGE);

        }
    }
    
    double[][] matrixFromString(String str, String matName)
    {
        double[][] result_ = null;
        
        Pattern pattern = Pattern.compile(matName+"\\s*\\[(\\d+)\\s*,\\s*(\\d+)\\]\\s*[:]\\s*\\{([^{}]+)\\}");//\\s*\\{ (\\s*(-?[0-9.])\\s+)+ \\}");
        Matcher matcher = pattern.matcher(str);
        
        if(matcher.find())
        {
            String fullMatch = matcher.group(0);
            String sRows =  matcher.group(1);
            String sCols =  matcher.group(2);
            String sValues =  matcher.group(3);
            
            int rows_ = Integer.parseInt(sRows);
            int cols_ = Integer.parseInt(sCols);
            
            result_ = new double[rows_][cols_];
            
            Pattern subPattern = Pattern.compile("-?[0-9.]+");
            
            Matcher subMatcher = subPattern.matcher(sValues);
            
            int i=0,j=0;
            while(subMatcher.find() && (i<rows_))
            {
                String sDouble = subMatcher.group();
                double v = Double.parseDouble(sDouble);
                
                result_[i][j] = v;
                j++;
                if(j>=cols_)
                {
                    i++;
                    j=j%cols_;
                }
                        
            }
        }
        
        return result_;
    }
    
    void loadMatricesFromFile(java.io.File file)
    {
        
        try(RandomAccessFile dos = new RandomAccessFile(file,"r")) {
            byte[] b;
            b = new byte[(int)dos.length()];
            
            dos.read(b);
            String fullFile = new String(b);
            
            opA = matrixFromString(fullFile, "opA");
            opB = matrixFromString(fullFile, "opB");

            rows = opA.length;
            cols = opB[0].length;
            
            result = new double[rows][cols];
            
            
            Integer sCols = cols;
            Integer sRows = rows;
            jtfColoumns.setText(sCols.toString());
            jtfRows.setText(sRows.toString());
            
            UpdateMatricesSize();
            arrayToTable(opA, jtOpA);
            arrayToTable(opB, jtOpB);
            
            //...
        }
        catch(java.io.IOException e){              
            JOptionPane.showMessageDialog(null, "Error writing to file '" +file.getAbsolutePath()+"'\n" + e, "Error: " + "file access", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private int rows = 1;
    private int cols = 1;
    
    
    private double[][] result;
    private double[][] opA;
    private double[][] opB;
     
            
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbGenerateRandomOpA;
    private javax.swing.JButton jbGenerateRandomOpB;
    private javax.swing.JButton jbOpALoad;
    private javax.swing.JButton jbOpASave;
    private javax.swing.JButton jbUnityOpA;
    private javax.swing.JButton jbUnityOpB;
    private javax.swing.JButton jbZeroOpA;
    private javax.swing.JButton jbZeroOpB;
    private javax.swing.JLabel jlOperation;
    private javax.swing.JRadioButton jrbMult;
    private javax.swing.JRadioButton jrbSubstr;
    private javax.swing.JRadioButton jrbSum;
    private javax.swing.JTable jtOpA;
    private javax.swing.JTable jtOpB;
    private javax.swing.JTable jtResult;
    private javax.swing.JTextField jtfColoumns;
    private javax.swing.JTextField jtfRows;
    // End of variables declaration//GEN-END:variables
}
